{"version":3,"file":"static/js/622.6cab4a73.chunk.js","mappings":"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","sources":["pages/auth/Login.jsx","services/auth.service.js","redux/actions/auth.js","redux/actions/route.js","services/API.js"],"sourcesContent":["import { LockOutlined, UserOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  LoginForm,\r\n  ProConfigProvider,\r\n  ProFormText,\r\n} from \"@ant-design/pro-components\";\r\nimport { Spin, Alert } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/actions/auth\";\r\n// import { useNavigate, Navigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { setRoute } from \"../../redux/actions/route\";\r\n\r\nexport const Login = () => {\r\n  const isLoggedIn = useSelector((state) => state.auth.isLoggedIn);\r\n  const message = useSelector((state) => state.message.message);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // let navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      dispatch(setRoute(\"dashboard\"));\r\n    }\r\n  }, [isLoggedIn, dispatch]);\r\n\r\n  const handleSubmit = (values) => {\r\n    setLoading(true);\r\n    dispatch(login(values))\r\n      .then(() => {\r\n        setLoading(false);\r\n        // navigate(\"/\");\r\n        // window.location.reload();\r\n        dispatch(setRoute(\"dashboard\"));\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <ProConfigProvider hashed={false}>\r\n        <div className=\"bg-white mt-16\">\r\n          <LoginForm\r\n            title=\"SIGN IN\"\r\n            subTitle=\"Sign-in with your e-shop admin account.\"\r\n            submitter={{\r\n              searchConfig: {\r\n                submitText: \"Sign In\",\r\n              },\r\n            }}\r\n            onFinish={handleSubmit}\r\n          >\r\n            <>\r\n              {message && (\r\n                <Alert\r\n                  message={message}\r\n                  type=\"error\"\r\n                  className=\"my-2\"\r\n                  showIcon\r\n                />\r\n              )}\r\n              <ProFormText\r\n                name=\"name\"\r\n                fieldProps={{\r\n                  size: \"large\",\r\n                  prefix: <UserOutlined className={\"prefixIcon\"} />,\r\n                }}\r\n                placeholder={\"Input user name\"}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"This field is required!\",\r\n                  },\r\n                ]}\r\n              />\r\n              <ProFormText.Password\r\n                name=\"password\"\r\n                fieldProps={{\r\n                  size: \"large\",\r\n                  prefix: <LockOutlined className={\"prefixIcon\"} />,\r\n                }}\r\n                placeholder={\"Input password\"}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"This field is required\",\r\n                  },\r\n                ]}\r\n              />\r\n            </>\r\n          </LoginForm>\r\n        </div>\r\n      </ProConfigProvider>\r\n    </Spin>\r\n  );\r\n};\r\nexport default Login;\r\n","import axios from \"axios\";\r\nimport API_URL from \"./API\";\r\n\r\nconst login = (payload) => {\r\n  return axios.post(API_URL + \"login\", payload).then((response) => {\r\n    if (response.data.accessToken) {\r\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  });\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n  localStorage.removeItem(\"persist:root\");\r\n};\r\n\r\nconst authService = {\r\n  login,\r\n  logout,\r\n};\r\n\r\nexport default authService;\r\n","import {\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  SET_MESSAGE,\r\n  SET_ROUTE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../../services/auth.service\";\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      let permission = {};\r\n      if (data.user.level_id === 1) {\r\n        permission = { level: { view: 1, add: 1, edit: 1, del: 1 } };\r\n      }\r\n      data.user.role.map(\r\n        (r) =>\r\n          (permission = {\r\n            ...permission,\r\n            [r.page]: {\r\n              ...permission[r.page],\r\n              [r.operation]: r.permission,\r\n            },\r\n          })\r\n      );\r\n      const user = {\r\n        id: data.user.id,\r\n        name: data.user.name,\r\n        level: data.user.level_id,\r\n        permission: permission,\r\n        parent: data.user.parent,\r\n        token: data.access_token,\r\n      };\r\n      localStorage.setItem(\"token\", data.access_token);\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user },\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      let message = \"\";\r\n      switch (error.code) {\r\n        case \"ERR_NETWORK\":\r\n          message = \"Network problem.\";\r\n          break;\r\n        case \"ERR_BAD_REQUEST\":\r\n          if (error.response.data.status === 401) {\r\n            message = \"User name or password is incorrect.\";\r\n          } else {\r\n            message = \"Unknown error. Please contact admin.\";\r\n          }\r\n\r\n          break;\r\n        default:\r\n          message = \"Unknown error. Please contact admin.\";\r\n          break;\r\n      }\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n  localStorage.clear();\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n  dispatch({\r\n    type: SET_ROUTE,\r\n    payload: {\r\n      name: \"auth/login\",\r\n      param: null,\r\n    },\r\n  });\r\n};\r\n","import { SET_ROUTE } from \"./types\";\r\n\r\nexport const setRoute = (pageName, param = null) => ({\r\n  type: SET_ROUTE,\r\n  payload: {\r\n    name: pageName,\r\n    param: param,\r\n  },\r\n});\r\n","// const API = \"http://45.142.215.75/\";\r\n// const API = \"http://localhost/\";\r\nconst API = \"http://172.96.137.116/\";\r\n\r\nexport default API;\r\n"],"names":["Login","isLoggedIn","useSelector","state","auth","message","_useState","useState","_useState2","_slicedToArray","loading","setLoading","dispatch","useDispatch","useEffect","setRoute","_jsx","Spin","spinning","children","ProConfigProvider","hashed","className","LoginForm","title","subTitle","submitter","searchConfig","submitText","onFinish","values","login","then","catch","_jsxs","_Fragment","Alert","type","showIcon","ProFormText","name","fieldProps","size","prefix","UserOutlined","placeholder","rules","required","Password","LockOutlined","payload","axios","post","API_URL","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","username","password","AuthService","permission","user","level_id","level","view","add","edit","del","role","map","r","_objectSpread","_defineProperty","page","operation","id","parent","token","access_token","LOGIN_SUCCESS","Promise","resolve","error","code","status","LOGIN_FAIL","SET_MESSAGE","reject","clear","LOGOUT","SET_ROUTE","param","pageName","arguments","length","undefined"],"sourceRoot":""}